/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   multipart-payload-transformer.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.

import {LitElement} from 'lit-element';

export {MultipartPayloadTransformer};

declare namespace LogicElements {

  /**
   * An element that contains methods to transform FormData object
   * into Multipart message and ArrayBuffer
   *
   * ## Example
   *
   * ```html
   * <multipart-payload-transformer form-data="[[formData]]"></multipart-payload-transformer>
   * ```
   *
   * ## Legacy dependencies
   *
   * If targeting legacy browsers add polyfill for Fetch API.
   */
  class MultipartPayloadTransformer extends LitElement {

    /**
     * Latest generated boundary value for the multipart forms.
     * Each call to `generateMessage()` or `generatePreview()` will
     * generate new content type and therefore boundary value.
     */
    boundary: string|null|undefined;

    /**
     * Latest generated content-type value for the multipart forms.
     * Each call to `generateMessage()` or `generatePreview()` will
     * generate new content type value.
     */
    contentType: string|null|undefined;
    onboundary: Function|null;
    oncontenttype: Function|null;

    /**
     * A form data object to transform.
     */
    formData: FormData|null;
    constructor();
    connectedCallback(): void;

    /**
     * Registers an event handler for given type
     *
     * @param eventType Event type (name)
     * @param value The handler to register
     */
    _registerCallback(eventType: String|null, value: Function|null): void;

    /**
     * Generates an ArrayBuffer instance from the FormData object.
     *
     * @returns A resolved promise when produces ArrayBuffer.
     */
    generateMessage(): Promise<String|null>;

    /**
     * Informs other ARC elements about content type change.
     * If boundary is added to the content type string then it is reported in
     * a separate event.
     *
     * @param contentType New cintent type.
     */
    _processContentType(contentType: String|null): void;

    /**
     * Generates a preview of the multipart messgae.
     *
     * @returns A promise resolved to a string message.
     */
    generatePreview(): Promise<String|null>;

    /**
     * Convert ArrayBuffer to readable form
     *
     * @returns Converted string
     */
    arrayBufferToString(buffer: ArrayBuffer|null): String|null;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "multipart-payload-transformer": LogicElements.MultipartPayloadTransformer;
  }
}
